# Production Profile
# Connects to actual Kalshi WebSocket server

server.port=8084

# Kalshi Server Configuration (Production)
# Note: Update these URLs to actual Kalshi production endpoints
mock.kalshi.rest.url=https://trading-api.kalshi.com
mock.kalshi.websocket.url=wss://trading-api.kalshi.com/trade-api/ws/v2

# Kafka Configuration (Production)
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.compression-type=snappy
spring.kafka.producer.linger-ms=10
spring.kafka.producer.batch-size=32768
spring.kafka.producer.acks=all
spring.kafka.producer.retries=3

# Kafka Topics
kafka.topic.market-data=market-data-all
kafka.topic.error-alert=FIX_ERROR_ALERT-PROD

# Redis Configuration (Production)
spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.timeout=5000ms
spring.data.redis.lettuce.pool.max-active=50
spring.data.redis.lettuce.pool.max-idle=20
spring.data.redis.lettuce.pool.min-idle=10

# Bootstrap Configuration
bootstrap.enabled=true
bootstrap.lookback.minutes=120

# WebSocket Connection Configuration (More resilient for production)
websocket.connection.retry.maxAttempts=50
websocket.connection.retry.delayMs=10000

# Logging (Less verbose for production)
logging.level.com.kalshi.marketdata=INFO
logging.level.org.springframework.web.socket=WARN
logging.level.root=INFO