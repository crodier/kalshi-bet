pekko {
  actor {
    provider = "cluster"
    serializers {
      jackson-json = "org.apache.pekko.serialization.jackson.JacksonJsonSerializer"
    }
    # marker interface on things we serialize, let's pekko know to use the jackson serializer
    serialization-bindings {
      "com.betfanatics.exchange.order.actor.SerializationMarker" = jackson-json
    }
  }
  serialization.jackson {
    jackson-modules += "com.fasterxml.jackson.module.kotlin.KotlinModule"
  }
  remote {
    artery {
      canonical.hostname = ${?PEKKO_HOST}
      canonical.port = 7355
    }
  }

  discovery {
    method = "kubernetes-api"
    kubernetes-api {
      pod-label-selector = "app.kubernetes.io/name=exchange-order-api"
      pod-namespace = "fex-1"
    }
  }
  cluster {
    bootstrap {
      contact-point-discovery {
        service-name = "exchange-order-api"
      }
      system-name = "exchange-order-api"
      enabled = true
    }
    downing-provider-class = "org.apache.pekko.cluster.sbr.SplitBrainResolverProvider"
  }
  persistence {
    journal.plugin = "pekko.persistence.r2dbc.journal"
    snapshot-store.plugin = "pekko.persistence.r2dbc.snapshot"
    r2dbc {
      connection-factory {
        driver = "postgresql"
        host = ${?PROD_DB_HOST}
        port = ${?PROD_DB_PORT}
        user = ${?PROD_DB_USER}
        password = ${?PROD_DB_PASSWORD}
        database = ${?PROD_DB_NAME}
      }
    }
    # we are using flyway to manage the schema
    r2dbc.journal.table-auto-create = off
    r2dbc.snapshot.table-auto-create = off
    r2dbc.offset-store.table-auto-create = off
  }
}
